--- a/service/tcp_test.go
+++ b/service/tcp_test.go
@@ -277,12 +277,18 @@ func probe(serverAddr *net.TCPAddr, bytesToSend []byte) error {
 	return nil
 }
 
+func makeLimiter(cipherList CipherList) TrafficLimiter {
+	c := MakeTestTrafficLimiterConfig(cipherList)
+	return NewTrafficLimiter(&c)
+}
+
 func TestProbeRandom(t *testing.T) {
 	listener := makeLocalhostListener(t)
 	cipherList, err := MakeTestCiphers(ss.MakeTestSecrets(1))
+
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond)
+	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond, makeLimiter(cipherList))
 	go s.Serve(listener)
 
 	// 221 is the largest random probe reported by https://gfw.report/blog/gfw_shadowsocks/
@@ -349,7 +355,7 @@ func TestProbeClientBytesBasicTruncated(t *testing.T) {
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	cipher := firstCipher(cipherList)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond)
+	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond, makeLimiter(cipherList))
 	s.SetTargetIPValidator(allowAll)
 	go s.Serve(listener)
 
@@ -379,7 +385,7 @@ func TestProbeClientBytesBasicModified(t *testing.T) {
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	cipher := firstCipher(cipherList)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond)
+	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond, makeLimiter(cipherList))
 	s.SetTargetIPValidator(allowAll)
 	go s.Serve(listener)
 
@@ -410,7 +416,7 @@ func TestProbeClientBytesCoalescedModified(t *testing.T) {
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	cipher := firstCipher(cipherList)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond)
+	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond, makeLimiter(cipherList))
 	s.SetTargetIPValidator(allowAll)
 	go s.Serve(listener)
 
@@ -448,7 +454,7 @@ func TestProbeServerBytesModified(t *testing.T) {
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	cipher := firstCipher(cipherList)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond)
+	s := NewTCPService(cipherList, nil, testMetrics, 200*time.Millisecond, makeLimiter(cipherList))
 	go s.Serve(listener)
 
 	initialBytes := makeServerBytes(t, cipher)
@@ -473,7 +479,7 @@ func TestReplayDefense(t *testing.T) {
 	replayCache := NewReplayCache(5)
 	testMetrics := &probeTestMetrics{}
 	const testTimeout = 200 * time.Millisecond
-	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout)
+	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout, makeLimiter(cipherList))
 	snapshot := cipherList.SnapshotForClientIP(nil)
 	cipherEntry := snapshot[0].Value.(*CipherEntry)
 	cipher := cipherEntry.Cipher
@@ -546,7 +552,7 @@ func TestReverseReplayDefense(t *testing.T) {
 	replayCache := NewReplayCache(5)
 	testMetrics := &probeTestMetrics{}
 	const testTimeout = 200 * time.Millisecond
-	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout)
+	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout, makeLimiter(cipherList))
 	snapshot := cipherList.SnapshotForClientIP(nil)
 	cipherEntry := snapshot[0].Value.(*CipherEntry)
 	cipher := cipherEntry.Cipher
@@ -611,7 +617,7 @@ func probeExpectTimeout(t *testing.T, payloadSize int) {
 	cipherList, err := MakeTestCiphers(ss.MakeTestSecrets(5))
 	require.Nil(t, err, "MakeTestCiphers failed: %v", err)
 	testMetrics := &probeTestMetrics{}
-	s := NewTCPService(cipherList, nil, testMetrics, testTimeout)
+	s := NewTCPService(cipherList, nil, testMetrics, testTimeout, makeLimiter(cipherList))
 
 	testPayload := ss.MakeTestPayload(payloadSize)
 	done := make(chan bool)
@@ -674,7 +680,7 @@ func TestTCPDoubleServe(t *testing.T) {
 	replayCache := NewReplayCache(5)
 	testMetrics := &probeTestMetrics{}
 	const testTimeout = 200 * time.Millisecond
-	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout)
+	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout, makeLimiter(cipherList))
 
 	c := make(chan error)
 	for i := 0; i < 2; i++ {
@@ -704,7 +710,7 @@ func TestTCPEarlyStop(t *testing.T) {
 	replayCache := NewReplayCache(5)
 	testMetrics := &probeTestMetrics{}
 	const testTimeout = 200 * time.Millisecond
-	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout)
+	s := NewTCPService(cipherList, &replayCache, testMetrics, testTimeout, makeLimiter(cipherList))
 
 	if err := s.Stop(); err != nil {
 		t.Error(err)
